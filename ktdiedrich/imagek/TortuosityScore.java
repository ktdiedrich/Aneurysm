/*=========================================================================
 *
 *  Copyright (c) Karl T. Diedrich 
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

package ktdiedrich.imagek;

import ktdiedrich.math.MatrixUtil;
import ij.*;
import ij.process.*;

/** Dimensionless tortuosity Score 
 * @author Karl Diedrich <ktdiedrich@gmail.com>
 * */
public class TortuosityScore
{
	public static final int BORDER_MARK = 1;
	public static final int BORDER_DFE = 3;
	private boolean _showSteps;
    private int _totalBorderVoxels;
    private int _totalScore;
    private int _height, _width, _zSize;
    private int _borderDFE;
   
    public TortuosityScore()
    {
        _borderDFE = BORDER_DFE; 
    }
    public double score3D(ImagePlus image)
    {
        return score3D(image.getStack());
    }
    public double score3D(ImageStack stack)
    {
        return score3D(ImageProcess.getShortStackVoxels(stack), stack.getWidth(), stack.getHeight());
    }
    public double score3D(short[][] voxels, int width, int height)
    {
        _height = height;
        _width = width;
        _zSize = voxels.length;
        DistanceFromEdge dfer = new DistanceFromEdge(1.0f, 1.0f, 1.0f);
        short[][] dfes = dfer.distanceFromEdge(voxels, width, height);
        if (_showSteps)
        {
            ImageProcess.display(dfes, width, height, "DistanceFromEdge");
        }
        
        short[][] borderVoxels = findBorderVoxels(dfes, _width, _height);
        short[][] maskScores = maskBorder(borderVoxels);
        
        if (_showSteps)
        {
            ImagePlus borderImage = ImageProcess.display(borderVoxels, _width, _height, "Border_Voxels");
            ImagePlus maskImage = ImageProcess.display(maskScores, _width, _height, "Mask_Scores");
        }
        
        
        return ((double)_totalScore / (double)_totalBorderVoxels );
    }
    
    protected short[][] findBorderVoxels(short[][] voxels, int width, int height)
    {
        _totalBorderVoxels = 0;
        short[][] borderVoxels = new short[voxels.length][(height*width)];
        
        for (int z=1; z < (voxels.length-1); z++)
        {
            for (int row=1; row <(height-1); row++)
            {
                for (int col=1; col<(width-1); col++)
                {
                    if (isBorder(voxels, col, row, z, width) )
                    {
                        borderVoxels[z][row*width+col] = BORDER_MARK;
                        _totalBorderVoxels++;
                    }
                }
            }
        }
        if (_showSteps)
        {
            System.out.println("Total border voxels: "+_totalBorderVoxels);
        }
        return borderVoxels;
    }
    protected short[][] findBorderVoxels(ImageStack stack)
    {
        return findBorderVoxels(ImageProcess.getShortStackVoxels(stack), stack.getWidth(), stack.getHeight());
    }
    protected short[][] maskBorder(short[][] borderVoxels)
    {
        _totalScore = 0;
        short[][] maskScores = new short[borderVoxels.length][borderVoxels[0].length];
        for (int z=1; z < _zSize-1; z++)
        {
            for (int row=1; row < _height-1; row++)
            {
                for (int col=1; col<_width-1; col++)
                {
                    if (borderVoxels[z][(row*_width)+col] == BORDER_MARK)
                    {
                        short score = scoreOneBorderVoxel(borderVoxels, col, row, z);
                        maskScores[z][(row*_width)+col] = score;
                        _totalScore += (int)score; 
                    }
                        
                }
            }
        }
        if (_showSteps)
        {
            System.out.println("Total tortuosity score: "+_totalScore);
        }
        return maskScores;
    }
    protected short scoreOneBorderVoxel(short[][] borderVoxels, int col, int row, int z)
    {
        short score = 0;
        // 26 neighbors
        
        short one  = 1;
        
        if (borderVoxels[z][(row)*_width+(col+1)] == BORDER_MARK)
        {
            score += one;
        }
        if (borderVoxels[z][(row)*_width+(col-1)] == BORDER_MARK)
        {
            score += one;
        }
        if (borderVoxels[z][(row+1)*_width+(col)] == BORDER_MARK)
        {
            score += one;
        }
        if (borderVoxels[z][(row-1)*_width+(col)] == BORDER_MARK)
        {
            score += one;
        }
        if (borderVoxels[z+1][(row)*_width+(col)] == BORDER_MARK)
        {
            score += one;
        }
        if (borderVoxels[z-1][(row)*_width+(col)] == BORDER_MARK)
        {
            score += one;
        }
        
        short two = 2;
        if (borderVoxels[z][(row+1)*_width+(col+1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z][(row+1)*_width+(col-1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z][(row-1)*_width+(col+1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z][(row-1)*_width+(col-1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z+1][(row)*_width+(col+1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z+1][(row)*_width+(col-1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z+1][(row+1)*_width+(col)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z+1][(row-1)*_width+(col)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z-1][(row)*_width+(col+1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z-1][(row)*_width+(col-1)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z-1][(row+1)*_width+(col)] == BORDER_MARK)
        {
            score += two;
        }
        if (borderVoxels[z-1][(row-1)*_width+(col)] == BORDER_MARK)
        {
            score += two;
        }
        
        short three = 3;
        if (borderVoxels[z-1][(row-1)*_width+(col+1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z-1][(row-1)*_width+(col-1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z+1][(row-1)*_width+(col+1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z+1][(row-1)*_width+(col-1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z+1][(row+1)*_width+(col+1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z+1][(row+1)*_width+(col-1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z-1][(row+1)*_width+(col+1)] == BORDER_MARK)
        {
            score += three;
        }
        if (borderVoxels[z-1][(row+1)*_width+(col-1)] == BORDER_MARK)
        {
            score += three;
        }
        
        return score; 
    }
    protected boolean isBorder(short[][] voxels, int col, int row, int z, int width )
    {
        // 6 faces
        
        if (voxels[z][row*width + col] < _borderDFE)
            return false;
       
        if (voxels[z][row*width + (col+1)] < _borderDFE)
            return true;
        
        if (voxels[z][row*width + (col-1)] < _borderDFE)
            return true;
        
        if (voxels[z][(row+1)*width + (col)] < _borderDFE)
            return true;
        
        if (voxels[z][(row-1)*width + (col)] < _borderDFE)
            return true;
        
        if (voxels[(z-1)][row*width + (col)] < _borderDFE)
            return true;
        
        if (voxels[(z+1)][row*width + (col)] < _borderDFE)
            return true;
 
        return false;
    }
    public boolean isShowSteps()
    {
        return _showSteps;
    }
    public void setShowSteps(boolean showSteps)
    {
        _showSteps = showSteps;
    }
    
    public int getBorderDFE()
    {
        return _borderDFE;
    }
    public void setBorderDFE(int borderDFE)
    {
        _borderDFE = borderDFE;
    }
    protected String tester(short[][][] cube, String name)
    {
        int zSize = cube.length;
        int height = cube[0].length;
        int width = cube[0][0].length;
        double score = score3D(MatrixUtil.cube2rect(cube), width, height);
        return name+": zSize="+zSize+", height="+height+", width="+width+", Border voxels="+_totalBorderVoxels+
                ", Raw score="+_totalScore+", normalized score="+score+"\n";
    }
    public String tests()
    {
        // expected Border=92, expected score = 
        short[][][] rectangle = { {
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0},
                                 }, 
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0},
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0}
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0}
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0}
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,4,4,4,4,0}, 
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,4,4,4,4,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0}
                                 },
                                 {
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0}, 
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                     {0,0,0,0,0,0},
                                 }
                               };
        short[][][] oval = { {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0},
            {0,0,4,4,0,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
        }, 
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        }
      };
        short[][][] permOval = { {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,4,0,0,0},
            {0,0,4,4,0,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
        }, 
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,4,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0}, 
            {0,4,4,4,4,0},
            {0,4,4,4,4,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,4,4,0,0},
            {0,0,4,4,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0}, 
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
            {0,0,0,0,0,0},
        }
      };
      short[][][] rectangle2 = { 
                {
                    {0,0,0,0,0,0,0,0,0,0,0}, 
                    {0,0,0,0,0,0,0,0,0,0,0}, 
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0}
                }, 
             {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0}, 
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,4,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              }
      };
      short[][][] diagRect = { 
          {
              {0,0,0,0,0,0,0,0,0,0,0}, 
              {0,0,0,0,0,0,0,0,0,0,0}, 
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0},
              {0,0,0,0,0,0,0,0,0,0,0}
          }, 
       {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,4,4,4,4,0,0,0,0,0,0}, 
            {0,4,4,4,4,0,0,0,0,0,0},
            {0,4,4,4,4,0,0,0,0,0,0},
            {0,4,4,4,4,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,4,4,4,4,0,0,0,0,0}, 
            {0,0,4,4,4,4,0,0,0,0,0},
            {0,0,4,4,4,4,0,0,0,0,0},
            {0,0,4,4,4,4,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,4,4,4,4,0,0,0,0}, 
            {0,0,0,4,4,4,4,0,0,0,0},
            {0,0,0,4,4,4,4,0,0,0,0},
            {0,0,0,4,4,4,4,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,0,4,4,4,4,0,0,0}, 
            {0,0,0,0,4,4,4,4,0,0,0},
            {0,0,0,0,4,4,4,4,0,0,0},
            {0,0,0,0,4,4,4,4,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,0,0,4,4,4,4,0,0}, 
            {0,0,0,0,0,4,4,4,4,0,0},
            {0,0,0,0,0,4,4,4,4,0,0},
            {0,0,0,0,0,4,4,4,4,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,0,0,0,4,4,4,4,0}, 
            {0,0,0,0,0,0,4,4,4,4,0},
            {0,0,0,0,0,0,4,4,4,4,0},
            {0,0,0,0,0,0,4,4,4,4,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,0,0,0,0,0,0,0,0}, 
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0}
        }
      };
      short[][][] line1 = { 
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
      };
      short[][][] line2 = { 
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,4,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
      };
      short[][][] line3 = { 
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,0,0,0,0,0,0,0,0},
                  {0,0,0,4,0,0,0,0,0,0,0},
                  {0,0,0,0,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
      };
      short[][][] line4 = { 
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,4,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,4,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,4,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
              {
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0}, 
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0,0,0}
              },
      };
        StringBuffer sb = new StringBuffer();
        sb.append(tester(oval, "Oval"));
        sb.append(tester(rectangle, "Rectangle"));
        sb.append(tester(permOval, "Permutated Oval"));
        sb.append(tester(rectangle2, "Rectangle2"));
        sb.append(tester(diagRect, "Diagonal Rectangle"));
        sb.append(tester(line1, "Line 1"));
        sb.append(tester(line2, "Line 2"));
        sb.append(tester(line3, "Line 3"));
        sb.append(tester(line4, "Line 4"));
        return sb.toString();
    }
    public int getTotalBorderVoxels()
    {
        return _totalBorderVoxels;
    }
    public int getTotalScore()
    {
        return _totalScore;
    }
    public static void main(String[] args)
    {
        // TODO doesn't work outside ImageJ program  
        TortuosityScore scorer = new TortuosityScore();
        scorer.setShowSteps(false);
        scorer.tests();
    }
}
